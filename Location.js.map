{"version":3,"sources":["../src/Location.jsx"],"names":["NO_MATCHING","DEFAULT_COUNTRY","compose","fns","arguments","result","i","length","call","Location","props","inputProps","_googlePredictions","_country","country","_noMatching","noMatching","input","config","minChars","keepListItems","sort","item","text","$","create","innerHTML","replace","RegExp","regExpEscape","trim","findDOMNode","_autocomplete","addEventListener","_handleAutocompleteSelect","bind","_handleInputChange","event","value","_getInputValue","updateAutocomplete","evaluate","list","map","description","results","fail","navKeys","isItNavKey","indexOf","keyCode","_getPredictions","then","find","l","filter","validate","place_id","getPlaceId","success","location","onLocationSet","coords","lat","lng","_getCoordinates","service","google","createAutocompleteService","isThereAnyText","resolve","reject","getPlacePredictions","componentRestrictions","types","placeId","geocoder","createGeocoder","geocode","status","geometry","Component","defaultProps","className","style","propTypes","func","object","string"],"mappings":"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","file":"Location.js","sourcesContent":["'use strict';\n\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Awesomplete from 'awesomplete';\nimport Promise from 'promise-polyfill';\nimport google from './vendor/google';\n\nconst NO_MATCHING = 'Unrecognised {{value}}, please check and re-enter.';\nconst DEFAULT_COUNTRY = 'US';\n\nvar compose = function () {\n  var fns = arguments;\n\n  return function (result) {\n    for (let i = fns.length - 1; i >= 0; i--) {\n      result = fns[i].call(this, result);\n    }\n    return result;\n  };\n};\n\nexport default class Location extends React.Component {\n\n  render() {\n    return <input type='text' {...this.props.inputProps} />;\n  }\n\n  componentWillMount() {\n    this._googlePredictions = [];\n    this._country = this.props.country || DEFAULT_COUNTRY;\n    this._noMatching = this.props.noMatching || NO_MATCHING;\n  }\n\n  componentDidMount() {\n    var input;\n    var config = {\n      minChars: 1,\n      keepListItems: false,\n      sort: function () { return 0; },\n      item: function (text, input) {\n        return Awesomplete.$.create('li', {\n          innerHTML: text.replace(\n            RegExp(Awesomplete.$.regExpEscape(input.trim()), 'gi'),\n            '<mark>$&</mark>'\n          ),\n          'aria-selected': 'false'\n        });\n      }\n    };\n\n    input = ReactDom.findDOMNode(this);\n    this._autocomplete = new Awesomplete(input, config);\n\n    input.addEventListener(\n      'awesomplete-selectcomplete',\n      this._handleAutocompleteSelect.bind(this)\n    );\n    input.addEventListener(\n      'keyup',\n      this._handleInputChange.bind(this)\n    );\n  }\n\n  updateCountry(country) {\n    this._country = country;\n  }\n\n  _handleInputChange(event) {\n    var value = this._getInputValue();\n    var updateAutocomplete = compose(\n      this._autocomplete.evaluate.bind(this._autocomplete),\n      (list) => this._autocomplete.list = list,\n      (list) => list.map((item) => item.description),\n      (results) => this._googlePredictions = results\n    );\n    var fail = compose(\n      updateAutocomplete,\n      (text) => [{ description: text }],\n      (text) => {\n        return this._noMatching.replace('{{value}}', text);\n      }\n    );\n    var navKeys = [38, 40, 13, 27];\n    var isItNavKey = navKeys.indexOf(event.keyCode) >= 0;\n\n    if (!isItNavKey) {\n      this._getPredictions(value).then(updateAutocomplete, fail);\n    }\n  }\n\n  _handleAutocompleteSelect() {\n    var value = this._getInputValue();\n    var find = (list) => {\n      let l = list.filter(item => item.description === value);\n\n      return l.length > 0 ? l[0] : false;\n    };\n    var validate = item => item && item.place_id ? item.place_id : false;\n    var getPlaceId = compose(validate, find);\n    var success = (location) => {\n      this.props.onLocationSet && this.props.onLocationSet({\n        description: value,\n        coords: {\n          lat: location.lat(),\n          lng: location.lng()\n        }\n      });\n    };\n\n    this._getCoordinates(getPlaceId(this._googlePredictions)).then(success);\n  }\n\n  _getInputValue() {\n    return ReactDom.findDOMNode(this).value;\n  }\n\n  _getPredictions(text) {\n    var service = (this.props.google || google).createAutocompleteService();\n    var isThereAnyText = !!text;\n\n    if (isThereAnyText) {\n      return new Promise((resolve, reject) => {\n        service.getPlacePredictions({\n          input: text,\n          componentRestrictions: { country: this._country },\n          types: ['(regions)']\n        }, (result) => {\n          if (result !== null) {\n            resolve(result);\n          } else {\n            reject(text);\n          }\n        });\n      });\n    }\n    return new Promise((resolve, reject) => {});\n  }\n\n  _getCoordinates(placeId) {\n    var geocoder = (this.props.google || google).createGeocoder();\n\n    return new Promise((resolve, reject) => {\n      geocoder.geocode({ placeId: placeId }, (results, status) => {\n        if (status === 'OK' && results && results.length > 0) {\n          resolve(results[0].geometry.location);\n        } else {\n          reject(false);\n        }\n      });\n    });\n  }\n\n};\n\nLocation.defaultProps = {\n  className: '',\n  style: {}\n};\n\nLocation.propTypes = {\n  onLocationSet: PropTypes.func,\n  inputProps: PropTypes.object,\n  country: PropTypes.string,\n  noMatching: PropTypes.string,\n  google: PropTypes.object\n};\n"]}