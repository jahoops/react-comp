{
  "_args": [
    [
      {
        "raw": "fast-memoize@^2.2.7",
        "scope": null,
        "escapedName": "fast-memoize",
        "name": "fast-memoize",
        "rawSpec": "^2.2.7",
        "spec": ">=2.2.7 <3.0.0",
        "type": "range"
      },
      "/home/mint/source/repos/react-comp/node_modules/glamorous"
    ]
  ],
  "_from": "fast-memoize@>=2.2.7 <3.0.0",
  "_id": "fast-memoize@2.2.8",
  "_inCache": true,
  "_location": "/fast-memoize",
  "_nodeVersion": "8.1.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/fast-memoize-2.2.8.tgz_1501694935304_0.6438033531885594"
  },
  "_npmUser": {
    "name": "caiogondim",
    "email": "me@caiogondim.com"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fast-memoize@^2.2.7",
    "scope": null,
    "escapedName": "fast-memoize",
    "name": "fast-memoize",
    "rawSpec": "^2.2.7",
    "spec": ">=2.2.7 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/glamorous"
  ],
  "_resolved": "https://registry.npmjs.org/fast-memoize/-/fast-memoize-2.2.8.tgz",
  "_shasum": "d7f899f31d037b12d9db4281912f9018575720b1",
  "_shrinkwrap": null,
  "_spec": "fast-memoize@^2.2.7",
  "_where": "/home/mint/source/repos/react-comp/node_modules/glamorous",
  "author": {
    "name": "Caio Gondim",
    "email": "me@caiogondim.com",
    "url": "http://caiogondim.com"
  },
  "bugs": {
    "url": "https://github.com/caiogondim/fast-memoize/issues"
  },
  "dependencies": {},
  "description": "Fastest memoization lib that supports N arguments",
  "devDependencies": {
    "benchmark": "^2.0.0",
    "cli-table2": "^0.2.0",
    "codecov": "^2.0.2",
    "covert": "^1.1.0",
    "iMemoized": "0.0.10",
    "jest": "20.0.4",
    "lodash": "^4.0.0",
    "logdown": "^1.2.5",
    "lru-cache": "^4.0.0",
    "lru-memoize": "^1.0.2",
    "memoizee": "^0.4.1",
    "ora": "^0.3.0",
    "ramda": "^0.22.1",
    "standard": "^10.0.2",
    "underscore": "^1.8.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-3ppTC3fZ9Vwtjslx8DkhSIbI9PH1nM4pobuTHQINOxTxchG8n3SDGZ8L6jbatGJCGLKR+gbkNWKFN4E1iUROSA==",
    "shasum": "d7f899f31d037b12d9db4281912f9018575720b1",
    "tarball": "https://registry.npmjs.org/fast-memoize/-/fast-memoize-2.2.8.tgz"
  },
  "files": [
    "README.md",
    "src/"
  ],
  "gitHead": "b205e5ca3e89adc84d2e8e6f587ee75d75a98dd8",
  "homepage": "https://github.com/caiogondim/fast-memoize#readme",
  "jest": {
    "testPathDirs": [
      "test/"
    ],
    "testRegex": "test/.*\\.js$",
    "collectCoverage": true,
    "coverageDirectory": "./coverage/"
  },
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "caiogondim",
      "email": "me@caiogondim.com"
    }
  ],
  "name": "fast-memoize",
  "optionalDependencies": {},
  "readme": "<img src=\"http://rawgit.com/caiogondim/fast-memoize/master/img/icon.svg\" width=\"100%\" />\n\n<h1 align=\"center\">fast-memoize.js</h1>\n\n<div align=\"center\">\n  <img src=\"http://travis-ci.org/caiogondim/fast-memoize.js.svg?branch=master\" alt=\"Travis CI\"> <img src=\"http://img.badgesize.io/caiogondim/fast-memoize.js/master/src/index.js?compression=gzip\"> <img src=\"https://codecov.io/gh/caiogondim/fast-memoize.js/branch/master/graph/badge.svg\" alt=\"Code coverage\"> <a href=\"https://www.npmjs.com/package/fast-memoize\"><img src=\"https://img.shields.io/npm/v/fast-memoize.svg\" /></a>\n</div>\n\n<br>\n\n> In computing, memoization is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again.\n> — Wikipedia\n\nThis library is an attempt to make the **fastest possible memoization library in\nJavaScript that supports *N* arguments**.\n\n## Installation\n\nTo use the library, install it through [npm](https://npmjs.com)\n\n```shell\nnpm install fast-memoize --save\n```\n\nTo port it to Browser or any other (non CJS) environment, use your favorite CJS\nbundler. No favorite yet? Try: [Browserify](http://browserify.org/),\n[Webmake](https://github.com/medikoo/modules-webmake) or\n[Webpack](http://webpack.github.io/)\n\n## Usage\n\n```js\nconst memoize = require('fast-memoize')\n\nconst fn = function (one, two, three) { /* ... */ }\n\nconst memoized = memoize(fn)\n\nmemoized('foo', 3, 'bar')\nmemoized('foo', 3, 'bar') // Cache hit\n```\n\n### Custom cache\n\nThe fastest cache is used for the running environment, but it is possible to\npass a custom cache to be used.\n\n```js\nconst memoized = memoize(fn, {\n  cache: {\n    create() {\n      var store = {};\n      return {\n        has(key) { return (key in store); },\n        get(key) { return store[key]; },\n        set(key, value) { store[key] = value; }\n      };\n    }\n  }\n})\n```\n\nThe custom cache should be an object containing a `create` method that returns an object implementing the following methods:\n- `get`\n- `set`\n- `has`\n\n### Custom serializer\n\nTo use a custom serializer:\n```js\nconst memoized = memoize(fn, {\n  serializer: customSerializer\n})\n```\n\nThe serializer is a function that receives one argument and outputs a string\nthat represents it. It has to be a\n[deterministic algorithm](https://en.wikipedia.org/wiki/Deterministic_algorithm)\nmeaning that, given one input, it always returns the same output.\n\n## Benchmark\n\nFor an in depth explanation on how this library was created, go read\n[this post on RisingStack](https://community.risingstack.com/the-worlds-fastest-javascript-memoization-library/).\n\nBelow you can see a performance benchmark between some of the most popular libraries\nfor memoization.\n\n<img src=\"http://rawgit.com/caiogondim/fast-memoize/master/img/benchmark.png\" width=\"100%\" />\n\nTo run the benchmark, clone the repo, install the dependencies and run `npm run benchmark`.\n```shell\ngit clone git@github.com:caiogondim/fast-memoize.git\ncd fast-memoize\nnpm install\nnpm run benchmark\n```\n\n<img src=\"http://rawgit.com/caiogondim/fast-memoize/master/img/benchmark-cli.gif\" width=\"100%\" />\n\n### Against another git hash\n\nTo benchmark the current code against a git hash, branch, ...\n\n```shell\nnpm run benchmark:compare 53fa9a62214e816cf8b5b4fa291c38f1d63677b9\n```\n\n### Gotchas\n\n#### Spread arguments\n\nWe check for `function.length` to get upfront the expected number of arguments in order to use\nthe fastest strategy. But with spread arguments we don't receive the right number.\n\n```js\nfunction multiply (multiplier, ...theArgs) {\n  return theArgs.map(function (element) {\n    return multiplier * element\n  })\n}\nmultiply.length // => 1\n```\n\nSo if you use spread arguments, explicitly set the strategy to variadic.\n\n```js\nconst memoizedMultiply = memoize(multiply, {\n  strategy: memoize.strategies.variadic\n})\n```\n\n## Credits\n- Icon by Mary Rankin from the Noun Project\n- [Bullet train ZSH theme](https://github.com/caiogondim/bullet-train-oh-my-zsh-theme)\n\n---\n\n[caiogondim.com](https://caiogondim.com) &nbsp;&middot;&nbsp;\nGitHub [@caiogondim](https://github.com/caiogondim) &nbsp;&middot;&nbsp;\nTwitter [@caio_gondim](https://twitter.com/caio_gondim)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/caiogondim/fast-memoize.git"
  },
  "scripts": {
    "benchmark": "node benchmark",
    "benchmark:cache": "node benchmark/cache",
    "benchmark:combination": "node benchmark/combination.js",
    "benchmark:compare": "./benchmark/compare-commits/index.sh",
    "benchmark:recursive-all": "node benchmark/recursive-all.js",
    "benchmark:recursive-solo": "node --trace-opt benchmark/recursive-solo.js",
    "benchmark:serializer": "node benchmark/serializer",
    "benchmark:solo": "node benchmark/solo.js",
    "benchmark:strategy": "node benchmark/strategy",
    "benchmark:trace": "node --trace-inlining --trace-opt --trace-deopt benchmark/trace.js",
    "benchmark:v8-optimization-analysis": "node --allow_natives_syntax --expose_debug_as=VirtualMachine benchmark/v8-optimization-analysis.js",
    "lint": "standard --fix \"src/**/*.js\" \"test/**/*.js\" \"benchmark/**/*.js\"",
    "preversion": "npm run test:all",
    "test": "jest",
    "test:all": "npm run lint && npm run test",
    "test:coverage": "covert test/*.js"
  },
  "version": "2.2.8"
}
