{
  "_args": [
    [
      {
        "raw": "glamorous@^3.13.1",
        "scope": null,
        "escapedName": "glamorous",
        "name": "glamorous",
        "rawSpec": "^3.13.1",
        "spec": ">=3.13.1 <4.0.0",
        "type": "range"
      },
      "/home/mint/source/repos/react-comp/node_modules/react-alert"
    ]
  ],
  "_from": "glamorous@>=3.13.1 <4.0.0",
  "_id": "glamorous@3.25.0",
  "_inCache": true,
  "_location": "/glamorous",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/glamorous-3.25.0.tgz_1501128802977_0.6078719305805862"
  },
  "_npmUser": {
    "name": "kentcdodds",
    "email": "kent@doddsfamily.us"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "glamorous@^3.13.1",
    "scope": null,
    "escapedName": "glamorous",
    "name": "glamorous",
    "rawSpec": "^3.13.1",
    "spec": ">=3.13.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-alert"
  ],
  "_resolved": "https://registry.npmjs.org/glamorous/-/glamorous-3.25.0.tgz",
  "_shasum": "d6d66c3dfffdc194761469adcbd996d4b70222e1",
  "_shrinkwrap": null,
  "_spec": "glamorous@^3.13.1",
  "_where": "/home/mint/source/repos/react-comp/node_modules/react-alert",
  "author": {
    "name": "Kent C. Dodds",
    "email": "kent@doddsfamily.us",
    "url": "http://kentcdodds.com/"
  },
  "bugs": {
    "url": "https://github.com/paypal/glamorous/issues"
  },
  "bundlesize": [
    {
      "path": "dist/glamorous.umd.tiny.min.js",
      "threshold": "3kB"
    },
    {
      "path": "dist/glamorous.es.tiny.js",
      "threshold": "5kB"
    },
    {
      "path": "dist/glamorous.cjs.tiny.js",
      "threshold": "5kB"
    }
  ],
  "dependencies": {
    "brcast": "^2.0.0",
    "fast-memoize": "^2.2.7",
    "html-tag-names": "^1.1.1",
    "react-html-attributes": "^1.3.0",
    "svg-tag-names": "^1.1.0"
  },
  "description": "React component styling solved",
  "devDependencies": {
    "@types/react": "^15.0.27",
    "all-contributors-cli": "^4.3.0",
    "babel-cli": "^6.24.1",
    "babel-jest": "^20.0.3",
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-preset-env": "^1.5.2",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-2": "^6.24.1",
    "babel-register": "^6.24.1",
    "bundlesize": "^0.12.2",
    "common-tags": "^1.4.0",
    "doctoc": "^1.3.0",
    "enzyme": "^2.8.2",
    "enzyme-to-json": "^1.5.1",
    "eslint": "^4.3.0",
    "eslint-config-kentcdodds": "^12.4.2",
    "glamor": "^2.20.31",
    "husky": "^0.14.3",
    "jest-cli": "^20.0.4",
    "jest-glamor-react": "^2.0.0",
    "lint-staged": "^4.0.2",
    "nps": "^5.3.1",
    "nps-utils": "^1.1.2",
    "opt-cli": "^1.5.1",
    "prettier-eslint-cli": "^4.1.0",
    "prop-types": "^15.5.10",
    "react": "^15.5.4",
    "react-addons-test-utils": "^15.5.1",
    "react-dom": "^15.5.4",
    "react-test-renderer": "^15.5.4",
    "rimraf": "^2.6.1",
    "rollup": "^0.45.2",
    "rollup-plugin-babel": "^2.7.1",
    "rollup-plugin-commonjs": "^8.0.2",
    "rollup-plugin-json": "^2.3.0",
    "rollup-plugin-node-resolve": "^3.0.0",
    "rollup-plugin-replace": "^1.1.1",
    "rollup-plugin-uglify": "^2.0.1",
    "tslint": "^5.4.3",
    "tslint-microsoft-contrib": "^5.0.0",
    "tsutils": "^1.9.1",
    "typescript": "^2.3.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-Y2ZykdbY+w1Bz97aUdOzmLr//vV6nQmBnnBfJfXG1AYi7zbp37m7X+giBGqZiyLCA65HgQ8yH89sZyD6sGMROg==",
    "shasum": "d6d66c3dfffdc194761469adcbd996d4b70222e1",
    "tarball": "https://registry.npmjs.org/glamorous/-/glamorous-3.25.0.tgz"
  },
  "eslintConfig": {
    "extends": [
      "kentcdodds",
      "kentcdodds/jest",
      "kentcdodds/react",
      "kentcdodds/prettier"
    ],
    "rules": {
      "import/prefer-default-export": 0,
      "react/no-unused-prop-types": 0,
      "valid-jsdoc": 0
    }
  },
  "files": [
    "dist",
    "typings"
  ],
  "gitHead": "6f6803f15cf2df66a7b035506f5206edff75222b",
  "homepage": "https://github.com/paypal/glamorous#readme",
  "jest": {
    "testEnvironment": "jsdom",
    "coverageThreshold": {
      "global": {
        "branches": 100,
        "functions": 100,
        "lines": 100,
        "statements": 100
      }
    },
    "snapshotSerializers": [
      "enzyme-to-json/serializer"
    ],
    "roots": [
      "src"
    ]
  },
  "jsnext:main": "dist/glamorous.es.js",
  "keywords": [
    "react",
    "css",
    "css-in-js",
    "cssinjs",
    "styled-components",
    "glamor",
    "jsxstyle"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "prettier-eslint --write",
      "git add"
    ],
    "README.md": [
      "npm run doctoc",
      "git add"
    ]
  },
  "main": "dist/glamorous.cjs.js",
  "maintainers": [
    {
      "name": "kentcdodds",
      "email": "kent@doddsfamily.us"
    }
  ],
  "module": "dist/glamorous.es.js",
  "name": "glamorous",
  "optionalDependencies": {},
  "peerDependencies": {
    "glamor": ">=2",
    "react": ">=0.14"
  },
  "readme": "<h1 align=\"center\">\n  <img src=\"https://github.com/paypal/glamorous/raw/master/other/logo/full.png\" alt=\"glamorous\" title=\"glamorous\" width=\"200\">\n  <br>\n  glamorous 💄\n  <br>\n</h1>\n<p align=\"center\" style=\"font-size: 1.2rem;\">Maintainable CSS with React</p>\n\n> Read [the intro blogpost][intro-blogpost]\n\n[![Build Status][build-badge]][build]\n[![Code Coverage][coverage-badge]][coverage]\n[![version][version-badge]][package]\n[![downloads][downloads-badge]][npm-stat]\n[![MIT License][license-badge]][LICENSE]\n\n[![All Contributors](https://img.shields.io/badge/all_contributors-44-orange.svg?style=flat-square)](#contributors)\n[![PRs Welcome][prs-badge]][prs]\n[![Chat][chat-badge]][chat]\n[![Code of Conduct][coc-badge]][coc]\n[![Roadmap][roadmap-badge]][roadmap]\n[![Examples][examples-badge]][examples]\n\n[![gzip size][gzip-badge]][unpkg-dist]\n[![size][size-badge]][unpkg-dist]\n[![module formats: umd, cjs, and es][module-formats-badge]][unpkg-dist]\n[![Watch on GitHub][github-watch-badge]][github-watch]\n[![Star on GitHub][github-star-badge]][github-star]\n[![Tweet][twitter-badge]][twitter]\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**\n\n- [The problem](#the-problem)\n- [This solution](#this-solution)\n- [Installation](#installation)\n  - [React Native](#react-native)\n  - [Typescript](#typescript)\n- [Video Intro :tv:](#video-intro-tv)\n- [Terms and concepts](#terms-and-concepts)\n  - [glamorous](#glamorous)\n  - [glamorous API](#glamorous-api)\n  - [Theming](#theming)\n  - [Config](#config)\n  - [Context](#context)\n  - [Size](#size)\n  - [Server Side Rendering (SSR)](#server-side-rendering-ssr)\n  - [Example Style Objects](#example-style-objects)\n- [Related projects](#related-projects)\n- [Users](#users)\n- [Inspiration](#inspiration)\n- [Other Solutions](#other-solutions)\n- [Support](#support)\n- [Got Questions?](#got-questions)\n- [Swag 👕](#swag-)\n- [Contributors](#contributors)\n- [LICENSE](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## The problem\n\nYou like CSS in JS, but you don't like having to create entire component\nfunctions just for styling purposes. You don't want to give a name to something\nthat's purely style-related. And it's just kind of annoying to do the\nstyle-creating, `className` assigning, and props-forwarding song and dance.\n\nFor example, this is what you have to do with raw `glamor` (or `aphrodite` or\nsimilar for that matter):\n\n```jsx\nconst styles = glamor.css({\n  fontSize: 20,\n  textAlign: 'center',\n})\nfunction MyStyledDiv({className = '', ...rest}) {\n  return (\n    <div\n      className={`${styles} ${className}`}\n      {...rest}\n    />\n  )\n}\n```\n\n## This solution\n\nWith `glamorous`, that example above looks as simple as this:\n\n```javascript\nconst MyStyledDiv = glamorous.div({\n  fontSize: 20,\n  textAlign: 'center',\n})\n```\n\nIn fact, it's even better, because there are a bunch of features that make\ncomposing these components together really nice!\n\nOh, and what if you didn't care to give `MyStyledDiv` a name? If you just want\na div that's styled using glamor? You can do that too:\n\n```jsx\nconst { Div } = glamorous\n\nfunction App() {\n  return (\n    <Div\n      fontSize={20}\n      textAlign=\"center\"\n    >\n      Hello world!\n    </Div>\n  )\n}\n```\n\n> Try this out in your browser [here](https://codesandbox.io/s/mDLZ1oKn)!\n\nSo that's the basics of this solution... Let's get to the details!\n\n## Installation\n\nThis module is distributed via [npm][npm] which is bundled with [node][node] and\nshould be installed as one of your project's `dependencies`:\n\n```\nnpm install --save glamorous\n```\n\nThis also depends on `react` and `glamor` so you'll need those in your project\nas well (if you don't already have them):\n\n```\nnpm install --save react glamor\n```\n\n> NOTE: If you're using React v15.5 or greater, you'll also need to have\n> `prop-types` installed: `npm install --save prop-types`\n\nYou can then use one of the module formats:\n\n- `main`: `dist/glamorous.cjs.js` - exports itself as a CommonJS module\n- `global`: `dist/glamorous.umd.js` and `dist/glamorous.umd.min.js` - exports\n  itself as a [umd][umd] module which is consumable in several environments, the\n  most notable as a global.\n- `jsnext:main` and `module`: `dist/glamorous.es.js` - exports itself using the\n  ES modules specification, you'll need to configure webpack to make use of this\n  file do this using the [resolve.mainFields][mainFields] property.\n\nThe most common use-case is consuming this module via CommonJS:\n\n```javascript\nconst glamorous = require('glamorous')\nconst {ThemeProvider} = glamorous\n// etc.\n```\n\nIf you're transpiling (and/or using the `jsnext:main`):\n\n```javascript\nimport glamorous, {ThemeProvider} from 'glamorous'\n\n// you can also import specific Glamorous Components (see section below on \"Built-in\" components)\nimport {Div, H2} from 'glamorous'\n\n// tags with the same name as built-in JavaScript objects are importable with a Tag suffix\n// and tag names that contain dashes are transformed to CamelCase\nimport {MapTag, ColorProfile} from 'glamorous'\n```\n\nIf you want to use the global:\n\n```html\n<!-- Load dependencies -->\n<script src=\"https://unpkg.com/react/dist/react.js\"></script>\n<script src=\"https://unpkg.com/prop-types/prop-types.js\"></script>\n<script src=\"https://unpkg.com/glamor/umd/index.js\"></script>\n<!-- load library -->\n<script src=\"https://unpkg.com/glamorous/dist/glamorous.umd.js\"></script>\n<script>\n// Use window.glamorous here...\nconst glamorous = window.glamorous\nconst {ThemeProvider} = glamorous\n</script>\n```\n\n### React Native\n\n`glamorous` offers a version for React Native projects called `glamorous-native`.\n\n```js\nnpm install glamorous-native --save\n```\n\nYou can learn more at the [glamorous-native project][glamorous-native].\n\n### Typescript\n\n`glamorous` includes typescript definition files.\n\nFor usage notes and known issues see [other/TYPESCRIPT_USAGE.md][typescript-usage].\n\n## Video Intro :tv:\n\n<a href=\"https://youtu.be/lmrQTpJ_3PM\" title=\"glamorous walkthrough\">\n  <img src=\"https://github.com/paypal/glamorous/raw/master/other/glamorous-walkthrough.png\" alt=\"Video Screenshot\" title=\"Video Screenshot\" width=\"700\" />\n</a>\n\n## Terms and concepts\n\n### glamorous\n\nThe `glamorous` function is the main (only) export. It allows you to create\nglamorous components that render the styles to the component you give it. This\nis done by forwarding a `className` prop to the component you tell it to render.\nBut before we get into how you wrap custom components, let's talk about the\nbuilt-in DOM components.\n\n#### built-in DOM component factories\n\nFor every DOM element, there is an associated `glamorous` component factory\nattached to the `glamorous` function. As above, you can access these factories\nlike so: `glamorous.div`, `glamorous.a`, `glamorous.article`, etc.\n\n```jsx\nconst MyStyledSection = glamorous.section({ margin: 1 })\n\n<MyStyledSection>content</MyStyledSection>\n// rendered output: <section class=\"<glamor-generated-class>\">content</section>\n// styles applied: {margin: 1}\n```\n\n#### glamorousComponentFactory\n\nWhether you create one yourself or use one of the built-in ones mentioned above,\neach `glamorousComponentFactory` allows you to invoke it with styles and it\nreturns you a new component which will have those styles applied when it's\nrendered. This is accomplished by generating a `className` for the styles you\ngive and forwarding that `className` onto the rendered element. So if you're\nwrapping a component you intend to style, you'll need to make sure you accept\nthe `className` as a prop and apply it to where you want the styles applied in\nyour custom component (normally the root element).\n\n```jsx\nconst UnstyledComp = ({ className, children }) => <div className={`${className} other-class`}>{children}</div>\nconst MyStyledComp = glamorous(UnstyledComp)({ margin: 1 })\n\n<MyStyledComp>content</MyStyledComp>\n// rendered output: <div class=\"<glamor-generated-class> other-class\">content</div>\n// styles applied: \n// <glamor-generated-class> {\n//  margin: 1px;\n// }\n```\n\n##### ...styles\n\nThe `glamorousComponentFactory` accepts any number of style object arguments.\nThese can be style objects or functions which are invoked with `props` on every\nrender and return style objects. To learn more about what these style objects\ncan look like, please take a look at the [`glamor`][glamor] documentation.\n\n```jsx\nconst MyStyledDiv = glamorous.div(\n  {\n    margin: 1,\n  },\n  (props) => ({\n    padding: props.noPadding ? 0 : 4,\n  })\n)\n\n<MyStyledDiv /> // styles applied: { margin: 1px; padding: 4px; }\n<MyStyledDiv noPadding /> // styles applied: { margin: 1px; padding: 0; }\n```\n\n> Tip: glamorous simply takes these style objects and forwards them to `glamor`.\n> `glamor` will then merge those together in a way you would expect. One neat\n> thing you can do is specify an array of style objects and `glamor` will treat\n> that exactly the same. It's really expressive! See the [examples][examples]\n> for an example of how this works.\n\nYou can also specify other classes you'd like applied to the component as well.\nIf these classes are generated by glamor, then their styles will be merged with\nthe glamor style's, otherwise the class name will simply be forwarded. For\nexample:\n\n```jsx\nconst className1 = glamor.css({paddingTop: 1, paddingRight: 1}).toString()\nconst styles2 = {paddingRight: 2, paddingBottom: 2}\nconst className3 = glamor.css({paddingBottom: 3, paddingLeft: 3}).toString()\nconst styles4 = {paddingLeft: 4}\nconst styles5 = props => (props.active ? 'active' : 'not-active')\nconst MyStyledDiv = glamorous.div(\n  className1,\n  styles2,\n  className3,\n  styles4,\n  styles5,\n  'extra-thing',\n)\n<MyStyledDiv /> // styles applied: { padding-top: 1px; padding-right: 2px; padding-bottom: 3px; padding-left: 4px } + 'not-active' and anything coming from `extra-thing`.\n```\n\n#### GlamorousComponent\n\nThe `GlamorousComponent` is what is returned from the `glamorousComponentFactory`.\nIts job is to get all the styles together, get a `className` (from [`glamor`][glamor])\nand forward that on to your component.\n\n##### supported props\n\nBy default `GlamorousComponent` supports three props: `className`, `css` and `theme`\nwhich are used to override the styles of the component in different scenarios. For a\nmore detailed explanation see [Overriding component styles](#overriding-component-styles) and [Theming](#theming) sections below.\n\n##### `innerRef`\n\nThis is a function and if provided, will be called with the inner element's\nreference.\n\n```jsx\nconst MyDiv = glamorous.div({ padding: 20 })\n\n// You can get a reference to the inner element with the `innerRef` prop\nclass MyComponent extends React.Component {\n  render () {\n    return (\n      <MyDiv innerRef={c => this._divRef = c} />\n    )\n  }\n}\n```\n\n##### other props\n\nOnly props that are safe to forward to the specific `element` (ie. that will\nultimately be rendered) will be forwarded. So this is totally legit:\n\n```jsx\n<MyStyledDiv size=\"big\" />\n```\n\nA use case for doing something like this would be for dynamic styles:\n\n```javascript\nconst staticStyles = {color: 'green'}\nconst dynamicStyles = props => ({fontSize: props.size === 'big' ? 32 : 24})\nconst MyDynamicallyStyledDiv = glamorous.div(staticStyles, dynamicStyles)\n```\n\n> The exception to this prop forwarding is the pre-created `GlamorousComponent`s\n> (see below).\n\n#### built-in GlamorousComponents\n\nOften you want to style something without actually giving it a name (because\nnaming things is hard). So glamorous also exposes a pre-created\n`GlamorousComponent` for each DOM node type which makes this reasonable to do:\n\n```jsx\nconst { Div, Span, A, Img } = glamorous\n\nfunction MyUserInterface({name, tagline, imageUrl, homepage, size}) {\n  const nameSize = size\n  const taglineSize = size * 0.5\n  return (\n    <Div display=\"flex\" flexDirection=\"column\" justifyContent=\"center\">\n      <A href={homepage} textDecoration=\"underline\" color=\"#336479\">\n        <Img borderRadius=\"50%\" height={180} src={imageUrl} />\n        <Div fontSize={nameSize} fontWeight=\"bold\">{name}</Div>\n      </A>\n      <Span fontSize={taglineSize} color=\"#767676\">\n        {tagline}\n      </Span>\n    </Div>\n  )\n}\n```\n\n> Try this out in your browser [here](https://codesandbox.io/s/wmRo8OKDm)!\n\nHaving to name all of that stuff could be tedious, so having these pre-built\ncomponents is handy. The other handy bit here is that the props _are_ the styles\nfor these components. Notice that glamorous can distinguish between props that\nare for styling and those that are have semantic meaning (like with the `Img`\nand `A` components which make use of `src` and `href` props).\n\nThe `css` prop can be used to provide styles as an object.\n\n```jsx harmony\nimport glamorous, {withTheme} from 'glamorous'\nconst { Div, Span } = glamorous\n\nconst predefinedStyle = {\n  color: '#767676',\n  fontSize: 18,\n}\n\nconst MyUserInterface = withTheme(function ({tagline, theme}) {\n  return (\n    <Div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        [theme.mq.tablet]: {\n          flexDirection: 'row'\n        }\n      }}\n     >\n      <Span css={predefinedStyle}>\n        {tagline}\n      </Span>\n    </Div>\n  )\n})\n```\n\nOne other tip... This totally works:\n\n```jsx\n<glamorous.Div color=\"blue\">\n  JSX is pretty wild!\n</glamorous.Div>\n```\n\n#### Overriding component styles\n\nThe most common scenario for using props is to override the style of an\nexisting component (generated by `glamorous` or not). That can be achieved\nby using the props `className`, `css` and `theme` or simply component\ncomposition with the `glamorous()` function.\n\nIf you're interested in knowing more about using the `theme` prop, see the\n[Theming](#theming) section instead for a more detailed explanation. In this\nsection we'll explain how to use `className`, `css` and composition to override\nthe styles of a component.\n\nLet's see how that can be done in the examples below.\n\n> Try this out in your browser [here](https://codesandbox.io/s/Kro5369wG)!\n\nWe'll use this as our `GlamorousComponent`:\n\n```javascript\nconst MyStyledDiv = glamorous.div({margin: 1, fontSize: 1, padding: 1})\n```\n\n##### using `className`\n\nFor each `className` you provide, the `GlamorousComponent` will check to see\nwhether it is a [`glamor`][glamor] generated `className` (can be from raw glamor\nor from `glamorous`, doesn't matter). If it is, it will get the original styles\nthat were used to generate that `className` and merge those with the styles for\nthe element that's rendered in a way that the provided `className`'s styles win\nin the event of a conflict.\n\nIf the `className` is not generated by `glamor`, then it will simply be\nforwarded along with the `GlamorousComponent`-generated `className`.\n\n```jsx\nconst myCustomGlamorStyles = glamor.css({fontSize: 2})\n<MyStyledDiv className={`${myCustomGlamorStyles} custom-class`} />\n// styles applied:\n// {margin: 1, fontSize: 2, padding: 1}\n// as well as any styles custom-class applies\n```\n\n##### using `css`\n\nThis can be the same type as any of the styles provided\n(as in `glamorous.div(...styles)`). If specified, it will be merged with this\ncomponent's styles and take highest priority over the component's predefined\nstyles.\n\n```jsx\nconst myCustomGlamorStyles = glamor.css({fontSize: 2, padding: 2})\n<MyStyledDiv\n  className={`${myCustomGlamorStyles} custom-class`}\n  css={{padding: 3}}\n/>\n// styles applied:\n// { margin: 1px; fontSize: 2px; padding: 3px }\n// as well as any styles custom-class applies\n```\n\n##### using `glamorous()` composition\n\nIf we just want to extend the styles of an existing component it can be done\nby using the `glamorous()` function.\n\n```jsx\nconst MyComposedStyledDiv = glamorous(MyStyledDiv)({fontSize: 4, padding: 4})\n<MyComposedStyledDiv />\n// styles applied:\n// { margin: 1px; fontSize: 4px; padding: 4px; }\n```\n\nIn fact, the built-in DOM component factories provided are just an abstraction\nof this function, so `glamorous.div` could be written as `glamorous('div')` instead.\n\n### glamorous API\n\nThe `glamorous` function allows you to create your own\n`glamorousComponentFactory` (see [above](#glamorouscomponentfactory)) for any\ncomponent you have. For [example](https://codesandbox.io/s/g5kDAyB9):\n\n```jsx\nconst MyComponent = props => <div {...props} />\nconst myGlamorousComponentFactory = glamorous(MyComponent)\nconst MyGlamorousComponent = myGlamorousComponentFactory({/* styles */})\n\n<MyGlamorousComponent id=\"i-am-forwarded-to-the-div\" />\n```\n\nYou can also provide a few options to help glamorous know how to handle your\ncomponent:\n\n#### displayName\n\nThe `displayName` of a React component is used by React in the\n[React DevTools][react-devtools] and is really handy for debugging React\napplications. Glamorous will do its best to give a good `displayName` for your\ncomponent, but, for the example above, the best it can do is:\n`glamorous(MyComponent)`. If you want to specify a `displayName`, you can do\nso with this property. For [example](https://codesandbox.io/s/P3Lyw5j2):\n\n```jsx\nconst MyComponent = props => <div {...props} />\nconst myGlamorousComponentFactory = glamorous(\n  MyComponent,\n  {displayName: 'MyGlamorousComponent'}\n)\n```\n\n> Note: the `displayName` can also included in the className that your\n> components are given which makes the development experience a bit nicer.\n> To enable this see the section about `config`.\n> This will likely be enabled by default in the next major change.\n\nAnd now all components created by the `myGlamorousComponentFactory` will have\nthe `displayName` of `MyGlamorousComponent`.\n\nThere is also a [babel plugin][babel-displayname] that can monkey-patch the `displayName` onto\nthe components that you create from your component factory.\n\n\n#### rootEl\n\nReact has an [Unknown Prop Warning][unknown-prop-warning] that it logs when you\npass spurious props to DOM elements: (i.e. `<div big={true} />`). Because you\ncan style your components using props, glamorous needs to filter out the props\nyou pass so it doesn't forward these on to the underlying DOM element. However,\nif you create your own factory using a custom component, glamorous will just\nforward all the props (because the component may actually need them and\nglamorous has no way of knowing). But in some cases, the component may be\nspreading all of the props onto the root element that it renders. For these\ncases, you can tell glamorous which element is being rendered and glamorous will\napply the same logic for which props to forward that it does for the built-in\nfactories. For [example](https://codesandbox.io/s/P18oV4kD2):\n\n```jsx\nconst MyComponent = props => <div {...props} />\nconst myGlamorousComponentFactory = glamorous(\n  MyComponent,\n  {rootEl: 'div'}\n)\n\nconst MyGlamorousComponent = myGlamorousComponentFactory(props => ({\n  fontSize: props.big ? 36 : 24,\n}))\n\n<MyGlamorousComponent big={true} id=\"room423\" />\n// this will render:\n// <div id=\"room423\" />\n// with {fontSize: 36}\n// `big` is not forwarded to MyComponent because the `rootEl` is a `div` and `big`\n// is not a valid attribute for a `div` however `id` will be forwarded because\n// `id` is a valid prop\n```\n\n#### forwardProps\n\nThere are some cases where you're making a `glamorousComponentFactory` out of\na custom component that spreads _some_ of the properties across an underlying\nDOM element, but not all of them. In this case you should use `rootEl` to\nforward only the right props to be spread on the DOM element, but you can also\nuse `forwardProps` to specify extra props that should be forwarded. For\n[example](https://codesandbox.io/s/GZEo8jOyy):\n\n```jsx\nconst MyComponent = ({shouldRender, ...rest}) => (\n  shouldRender ? <div {...rest} /> : null\n)\nconst MyStyledComponent = glamorous(MyComponent, {\n  forwardProps: ['shouldRender'],\n  rootEl: 'div',\n})(props => ({\n  fontSize: props.big ? 36 : 24,\n}))\n<MyStyledComponent shouldRender={true} big={false} id=\"hello\" />\n// this will render:\n// <div id=\"hello\" />\n// with {fontSize: 24}\n// `shouldRender` will be forwarded to `MyComponent` because it is included in\n// `forwardProps`. `big` will not be forwarded to `MyComponent` because `rootEl`\n// is a `div` and that's not a valid prop for a `div`, but it will be used in\n// the styles object function that determines the `fontSize`. Finally `id` will\n// be forwarded to `MyComponent` because it is a valid prop for a `div`.\n```\n\n#### withComponent\n\nIn some cases you might want to just copy the styles of an already created\nglamorous component with a different tag altogether, `withComponent` function\ncomes in handy then. For example:\n\n```jsx\nconst Button = glamorous.button({\n  display: 'inline-block',\n  color: 'red',\n  fontSize: '16px',\n  margin: '16px',\n  padding: '8px 16px',\n  border: '1px solid red',\n  borderRadius: '4px',\n});\n\n// We're replacing the <button> tag with an <a> tag, but reuse all the same styles\nconst Link = Button.withComponent('a')\n\n<Button>Normal Button</Button>\n<Link>Normal Link</Link>\n// this will render:\n// <button>Normal Button</button>\n// <a>Normal Link</a>\n// both with the same styles\n```\n\n> Note: to override styles, you can do the same thing you do with a regular\n> component (`css` prop, wrap it in `glamorous()`, or regular `className` prop).\n\n### Theming\n\n`glamorous` fully supports theming using a special `<ThemeProvider>` component.\n\nIt provides the `theme` to all glamorous components down the tree.\n\n> Try this out in your browser [here](https://codesandbox.io/s/o2yq9MkQk)!\n\n```jsx\nimport glamorous, {ThemeProvider} from 'glamorous'\n\n// our main theme object\nconst theme = {\n  main: {color: 'red'}\n}\n\n// our secondary theme object\nconst secondaryTheme = {\n  main: {color: 'blue'}\n}\n\n// a themed <Title> component\nconst Title = glamorous.h1({\n  fontSize: '10px'\n}, ({theme}) => ({\n  color: theme.main.color\n}))\n\n// use <ThemeProvider> to pass theme down the tree\n<ThemeProvider theme={theme}>\n  <Title>Hello!</Title>\n</ThemeProvider>\n\n// it is possible to nest themes\n// inner themes will be merged with outers\n<ThemeProvider theme={theme}>\n  <div>\n    <Title>Hello!</Title>\n    <ThemeProvider theme={secondaryTheme}>\n      {/* this will be blue */}\n      <Title>Hello from here!</Title>\n    </ThemeProvider>\n  </div>\n</ThemeProvider>\n\n// to override a theme, just pass a theme prop to a glamorous component\n// the component will ignore any surrounding theme, applying the one passed directly via props\n<ThemeProvider theme={theme}>\n  {/* this will be yellow */}\n  <Title theme={{main: {color: 'yellow'}}}>Hello!</Title>\n</ThemeProvider>\n```\n\n`glamorous` also exports a `withTheme` higher order component (HOC) so you can access your theme in any component!\n> Try this out in your browser [here](https://codesandbox.io/s/qYmJjE4jy)!\n\n```jsx\nimport glamorous, {ThemeProvider,  withTheme} from 'glamorous'\n\n// our main theme object\nconst theme = {\n  main: {color: 'red'}\n}\n\n// a themed <Title> component\nconst Title = glamorous.h1({\n  fontSize: '10px'\n}, ({theme}) => ({\n  color: theme.main.color\n}))\n\n// normal component that takes a theme prop\nconst SubTitle = ({children, theme: {color}}) => (\n  <h3 style={{color}}>{children}</h3>\n)\n\n// extended component with theme prop\nconst ThemedSubTitle = withTheme(SubTitle)\n\n<ThemeProvider theme={theme}>\n  <Title>Hello!</Title>\n  <ThemedSubTitle>from withTheme!</ThemedSubTitle>\n</ThemeProvider>\n```\n\nOr if you prefer decorator syntax:\n\n```jsx\nimport React, {Component} from 'react'\nimport glamorous, {ThemeProvider,  withTheme} from 'glamorous'\n\n// our main theme object\nconst theme = {\n  main: {color: 'red'}\n}\n\n// a themed <Title> component\nconst Title = glamorous.h1({\n  fontSize: '10px'\n}, ({theme}) => ({\n  color: theme.main.color\n}))\n\n// extended component with theme prop\n@withTheme\nclass SubTitle extends Component {\n  render() {\n    const {children, theme: {main: {color}}} = this.props\n    return <h3 style={{color}}>{children}</h3>\n  }\n}\n\n<ThemeProvider theme={theme}>\n  <Title>Hello!</Title>\n  <SubTitle>from withTheme!</SubTitle>\n</ThemeProvider>\n```\n> `withTheme` expects a `ThemeProvider` further up the render tree and will warn in `development` if one is not found!\n\n### Config\n\nYou can configure glamorous globally with the `config` object which you can\naccess via `glamorous.config`.\n\n#### useDisplayNameInClassName\n\nDefaults to `false` (will default to `true` in a future major release).\nThis should _only_ be used for debugging purposes. It is strongly discouraged\nfrom referencing this className in your CSS due to the level of indirection that\nwill add (making it easier for you to break something when refactoring in the\nfuture).\n\nExample:\n\n```jsx\nimport glamorous from 'glamorous'\nglamorous.config.useDisplayNameInClassName = true\n\nconst MyComponent = props => <div {...props} />\nconst myGlamorousComponentFactory = glamorous(\n  MyComponent,\n  {displayName: 'MyGlamorousComponent'}\n)\n\nconst MyGlamorousComponent = myGlamorousComponentFactory()\n<MyGlamorousComponent />\n// renders <div class=\"css-nil MyGlamorousComponent\" />\n```\n\nIf you don't want to provide the `displayName` for all of your components, then\nyou can use [this babel-plugin][babel-displayname]. Otherwise, the className\nwill be simply: `glamorous(MyComponent)`\n\n### Context\n\n[context](https://facebook.github.io/react/docs/context.html) is an unstable\nAPI and it's not recommended to use it directly. However, if you need to use it\nfor some reason, here's an example of how you could do that:\n\n```jsx\n// NOTE!! In the next major version of glamorous, the API will be: (props, context)\n// this is because it maps more directly to the React function component API\n// and the `theme` is already available on the `props`\nconst dynamicStyles = (props, theme, context) => ({\n  color: context.isLoggedIn ? 'green' : 'red'\n})\nconst MyDiv = glamorous.div(dynamicStyles)\nMyDiv.contextTypes = {\n  isLoggedIn: PropTypes.string,\n}\n\nclass Parent extends React.Component {\n  getChildContext() {\n    return {\n      isLoggedIn: true,\n    }\n  }\n  render() {\n    return <MyDiv />\n  }\n}\n\nParent.childContextTypes = {\n  isLoggedIn: PropTypes.string,\n}\n\n<Parent />\n// renders <div />\n// with {color: 'green'}\n```\n\n### Size\n\nIf your use case is really size constrained, then you might consider using the \"tiny\" version of glamorous for your application.\nIt's is a miniature version of `glamorous` with a few limitations:\n\n1. No built-in component factories (`glamorous.article({/* styles */})`)\n   So you have to create your own (`glamorous('article')({/* styles */})`)\n2. No built-in glamorous components (`glamorous.Span`)\n3. No props filtering for dynamic styles, instead, you place them on a special\n   `glam` prop (see the example below).\n4. If you need `ThemeProvider` or `withTheme`, you must import those manually.\n   They are not exported as part of `glamorous/tiny` like they are with `glamorous`.\n\nHere's an example of what you're able to do with it.\n\n```jsx\nimport React from 'react'\nimport glamorous from 'glamorous/dist/glamorous.es.tiny'\n\nconst Comp = glamorous('div')({\n  color: 'red'\n}, (props) => ({\n  fontSize: props.glam.big ? 20 : 12\n}))\nfunction Root() {\n  return (\n    <Comp\n      glam={{big: true}}\n      thisWillBeForwardedAndReactWillWarn\n    >\n      ciao\n    </Comp>\n  )\n}\n\nexport default Root\n```\n\nIt's recommended to use either [`babel-plugin-module-resolver`][babel-plugin-module-resolver]\nor the [`resolve.alias`][resolve-alias] config with webpack so you don't have\nto import from that full path. You have the following options available for this\nimport:\n\n1. `glamorous/dist/glamorous.es.tiny.js` - use if you're using Webpack@>=2 or Rollup\n2. `glamorous/dist/glamorous.cjs.tiny` - use if you're not transpiling ESModules\n3. `glamorous/dist/glamorous.umd.tiny.js` - use if you're including it as a script tag. (There's also a `.min.js` version).\n\nThe current size of `glamorous/dist/glamorous.umd.tiny.min.js` is: [![tiny size][tiny-size-badge]][unpkg-dist]\n[![tiny gzip size][tiny-gzip-badge]][unpkg-dist]\n\n> IMPORTANT NOTE ABOUT SIZE: Because `glamorous` depends on `glamor`, you should consider the full size you'll be adding\n> to your application if you don't already have `glamor`.\n> The current size of `glamor/umd/index.min.js` is: [![glamor size][glamor-size-badge]][unpkg-glamor]\n> [![glamor gzip size][glamor-gzip-badge]][unpkg-glamor]\n\n\n### Server Side Rendering (SSR)\n\nBecause both `glamor` and `react` support SSR, `glamorous` does too! I actually\ndo this on [my personal site](https://github.com/kentcdodds/kentcdodds.com)\nwhich is generated at build-time on the server. Learn about rendering\n[`react` on the server][react-ssr] and [`glamor` too][glamor-ssr].\n\n### Example Style Objects\n\nStyle objects can affect pseudo-classes and pseudo-elements, complex CSS\nselectors, introduce keyframe animations, and use media queries:\n\n<details>\n<summary>pseudo-class</summary>\n\n```javascript\nconst MyLink = glamorous.a({\n  ':hover': {\n    color: 'red'\n  }\n})\n\n// Use in a render function\n<MyLink href=\"https://github.com\">GitHub</MyLink>\n```\n</details>\n\n<details>\n<summary>pseudo-element</summary>\n\n```jsx\nconst MyListItem = glamorous.li({\n  listStyleType: 'none',\n  position: 'relative',\n  '&::before': {\n    content: `'#'`, // be sure the quotes are included in the passed string\n    display: 'block',\n    position: 'absolute',\n    left: '-20px',\n    width: '20px',\n    height: '20px'\n  }\n})\n// Use in a render function\n<ul>\n  <MyListItem>Item 1</MyListItem>\n  <MyListItem>Item 2</MyListItem>\n  <MyListItem>Item 3</MyListItem>\n</ul>\n```\n</details>\n\n<details>\n<summary>Relational CSS Selectors</summary>\n\n```jsx\nconst MyDiv = glamorous.div({\n  display: 'block',\n  '& div': { color: 'red' }, // child selector\n  '& div:first-of-type': { textDecoration: 'underline' }, // psuedo-selector\n  '& > p': { color: 'blue' } // direct descendent\n})\n\n// Use in a render function\n<MyDiv>\n  <div><p>Red Underlined Paragraph</p></div>\n  <div>Red Paragraph</div>\n  <p>Blue Paragraph</p>\n</MyDiv>\n```\n</details>\n\n<details>\n<summary>Animations</summary>\n\n> Try this in [your browser](https://codesandbox.io/s/31VMyP7XO)\n\n```jsx\n// import css from glamor\nimport { css } from 'glamor'\n\n// Define the animation styles\nconst animationStyles = props => {\n  const bounce = css.keyframes({\n    '0%': { transform: `scale(1.01)` },\n    '100%': { transform: `scale(0.99)` }\n  })\n  return {animation: `${bounce} 0.2s infinite ease-in-out alternate`}\n}\n\n// Define the element\nconst AnimatedDiv = glamorous.div(animationStyles)\n\n// Use in a render function\n<AnimatedDiv>\n  Bounce.\n</AnimatedDiv>\n```\n</details>\n\n<details>\n<summary>Media Queries</summary>\n\n```jsx\nconst MyResponsiveDiv = glamorous.div({\n  width: '100%',\n  padding: 20,\n  '@media(min-width: 400px)': {\n    width: '85%',\n    padding: 0\n  }\n})\n// Use in a render function\n<MyResponsiveDiv>\n  Responsive Content\n</MyResponsiveDiv>\n```\n</details>\n\n## Related projects\n\n- [babel-plugin-glamorous-displayname][babel-displayname]: Automatically adds a `displayName` to your glamorous components for a better debugging experience.\n\n## Users\n\nWho uses `glamorous`? See [other/USERS.md](https://github.com/paypal/glamorous/blob/master/other/USERS.md) and add yourself if you use `glamorous`!\n\n## Inspiration\n\nThis package was inspired by the work from people's work on the following\nprojects:\n\n- [styled-components](https://github.com/styled-components/styled-components)\n- [jsxstyle](https://github.com/smyte/jsxstyle)\n\nThe biggest inspiration for building this is because I love the API offered by\n`styled-components`, but I wanted:\n\n1. Not to ship a CSS parser to the browser (because it's huge and less\n  performant).\n2. Support for RTL (via something like [rtl-css-js][rtl-css-js])\n3. Support for using _real_ JavaScript objects rather than a CSS string (better\n  tooling support, ESLint, etc.)\n\n> You can get around the parser issue if you use a certain babel plugin, but\n> then you can't do any dynamic construction of your CSS string (like\n> [this][styled-components-util]) which is a bummer for custom utilities.\n\n## Other Solutions\n\nThere are actually quite a few solutions to the general problem of styling in\nReact. This isn't the place for a full-on comparison of features, but I'm\nunaware of any which supports _all_ of the features which this library supports.\n\n## Support\n\nIf you need help, please fork [this CodeSandbox][help-sandbox] and bring it up in\n[the chat][chat]\n\n## Got Questions?\n\nCheck out the [FAQ](docs/FAQ.md).\n\n## Swag 👕\n\nA community member created this awesome t-shirt, and they're now available on\nAmazon! For every shirt purchased, GSM Studio will donate $1 to\n[Girls Who Code][gwc] to support the next generation of programmers. The shirts\ncome in various colors and sizes. In addition you can check out other clever\nt-shirts by [GSM Studio](http://amzn.to/2rxvB1T).\n\n<a href=\"https://www.amazon.com/dp/B0714JQW67\" title=\"glamorous swag\">\n  <img src=\"https://images-na.ssl-images-amazon.com/images/I/71DiEnq5YgL._UX679_.jpg\" alt=\"Glamorous Logo T-Shirt\" title=\"Glamorous Logo T-Shirt\" width=\"200\" />\n</a>\n\n<a href=\"https://www.amazon.com/dp/B072LV68S2\" title=\"glamorous swag\">\n  <img src=\"https://images-na.ssl-images-amazon.com/images/I/71EL4mHhCtL._UX679_.jpg\" alt=\"Glamorous T-Shirt\" title=\"Glamorous T-Shirt\" width=\"200\" />\n</a>\n\n## Contributors\n\nThanks goes to these people ([emoji key][emojis]):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n| [<img src=\"https://avatars.githubusercontent.com/u/1500684?v=3\" width=\"100px;\"/><br /><sub>Kent C. Dodds</sub>](https://kentcdodds.com)<br />[💻](https://github.com/paypal/glamorous/commits?author=kentcdodds \"Code\") [📖](https://github.com/paypal/glamorous/commits?author=kentcdodds \"Documentation\") [🚇](#infra-kentcdodds \"Infrastructure (Hosting, Build-Tools, etc)\") [⚠️](https://github.com/paypal/glamorous/commits?author=kentcdodds \"Tests\") [👀](#review-kentcdodds \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/587016?v=3\" width=\"100px;\"/><br /><sub>Ives van Hoorne</sub>](http://ivesvh.com)<br />[💡](#example-CompuIves \"Examples\") | [<img src=\"https://avatars3.githubusercontent.com/u/4614574?v=3\" width=\"100px;\"/><br /><sub>Gerardo Nardelli</sub>](https://gnardelli.com)<br />[📖](https://github.com/paypal/glamorous/commits?author=patitonar \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/14236753?v=3\" width=\"100px;\"/><br /><sub>Chandan Rai</sub>](https://github.com/crowchirp)<br />[📖](https://github.com/paypal/glamorous/commits?author=crowchirp \"Documentation\") | [<img src=\"https://avatars3.githubusercontent.com/u/16726210?v=3\" width=\"100px;\"/><br /><sub>BinHong Lee</sub>](https://binhonglee.github.io)<br />[📖](https://github.com/paypal/glamorous/commits?author=binhonglee \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/737065?v=3\" width=\"100px;\"/><br /><sub>Paul Molluzzo</sub>](https://paul.molluzzo.com)<br />[📖](https://github.com/paypal/glamorous/commits?author=paulmolluzzo \"Documentation\") [💡](#example-paulmolluzzo \"Examples\") | [<img src=\"https://avatars0.githubusercontent.com/u/450559?v=3\" width=\"100px;\"/><br /><sub>Sriram Thiagarajan</sub>](http://tsriram.in)<br />[💻](https://github.com/paypal/glamorous/commits?author=tsriram \"Code\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/417268?v=3\" width=\"100px;\"/><br /><sub>Pavithra Kodmad</sub>](https://github.com/pksjce)<br />[💡](#example-pksjce \"Examples\") | [<img src=\"https://avatars0.githubusercontent.com/u/82070?v=3\" width=\"100px;\"/><br /><sub>Alessandro Arnodo</sub>](http://alessandro.arnodo.net)<br />[💻](https://github.com/paypal/glamorous/commits?author=vesparny \"Code\") [📖](https://github.com/paypal/glamorous/commits?author=vesparny \"Documentation\") [⚠️](https://github.com/paypal/glamorous/commits?author=vesparny \"Tests\") | [<img src=\"https://avatars1.githubusercontent.com/u/105127?v=3\" width=\"100px;\"/><br /><sub>Jason Miller</sub>](https://jasonformat.com)<br />[👀](#review-developit \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/1295580?v=3\" width=\"100px;\"/><br /><sub>Kyle Welch</sub>](http://www.krwelch.com)<br />[👀](#review-kwelch \"Reviewed Pull Requests\") [💡](#example-kwelch \"Examples\") | [<img src=\"https://avatars0.githubusercontent.com/u/1634922?v=3\" width=\"100px;\"/><br /><sub>Javi Velasco</sub>](http://javivelasco.com)<br />[👀](#review-javivelasco \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6886061?v=3\" width=\"100px;\"/><br /><sub>Brandon Dail</sub>](https://twitter.com/aweary)<br />[👀](#review-aweary \"Reviewed Pull Requests\") | [<img src=\"https://avatars2.githubusercontent.com/u/1714673?v=3\" width=\"100px;\"/><br /><sub>Jason Brown</sub>](http://browniefed.com)<br />[👀](#review-browniefed \"Reviewed Pull Requests\") |\n| [<img src=\"https://avatars3.githubusercontent.com/u/25375401?v=3\" width=\"100px;\"/><br /><sub>jackyho112</sub>](https://github.com/jackyho112)<br />[💻](https://github.com/paypal/glamorous/commits?author=jackyho112 \"Code\") [⚠️](https://github.com/paypal/glamorous/commits?author=jackyho112 \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/3629876?v=3\" width=\"100px;\"/><br /><sub>Kurtis Kemple</sub>](https://twitter.com/kurtiskemple)<br />[💻](https://github.com/paypal/glamorous/commits?author=kkemple \"Code\") [⚠️](https://github.com/paypal/glamorous/commits?author=kkemple \"Tests\") [📖](https://github.com/paypal/glamorous/commits?author=kkemple \"Documentation\") | [<img src=\"https://avatars1.githubusercontent.com/u/38172?v=3\" width=\"100px;\"/><br /><sub>Bernardo Raposo</sub>](http://bernardoraposo.com)<br />[📖](https://github.com/paypal/glamorous/commits?author=braposo \"Documentation\") [💡](#example-braposo \"Examples\") | [<img src=\"https://avatars2.githubusercontent.com/u/6325382?v=3\" width=\"100px;\"/><br /><sub>Ryan Delaney</sub>](http://rdel.io)<br />[💻](https://github.com/paypal/glamorous/commits?author=rrdelaney \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/14035529?v=3\" width=\"100px;\"/><br /><sub>Anthony Ng</sub>](http://anthonyng.me)<br />[📖](https://github.com/paypal/glamorous/commits?author=newyork-anthonyng \"Documentation\") | [<img src=\"https://avatars1.githubusercontent.com/u/37633?v=3\" width=\"100px;\"/><br /><sub>Matthew Crutchfield</sub>](http://cnn.com)<br />[💡](#example-mtcrutch \"Examples\") | [<img src=\"https://avatars1.githubusercontent.com/u/662750?v=3\" width=\"100px;\"/><br /><sub>Kye Hohenberger</sub>](https://github.com/tkh44)<br />[💻](https://github.com/paypal/glamorous/commits?author=tkh44 \"Code\") [⚠️](https://github.com/paypal/glamorous/commits?author=tkh44 \"Tests\") [📖](https://github.com/paypal/glamorous/commits?author=tkh44 \"Documentation\") |\n| [<img src=\"https://avatars3.githubusercontent.com/u/16327281?v=3\" width=\"100px;\"/><br /><sub>Bernard Lin</sub>](https://github.com/bernard-lin)<br />[📖](https://github.com/paypal/glamorous/commits?author=bernard-lin \"Documentation\") [🔌](#plugin-bernard-lin \"Plugin/utility libraries\") | [<img src=\"https://avatars2.githubusercontent.com/u/11799597?v=3\" width=\"100px;\"/><br /><sub>Miguel Correa</sub>](http://miguelc1221.github.io/)<br />[💻](https://github.com/paypal/glamorous/commits?author=miguelc1221 \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/769339?v=3\" width=\"100px;\"/><br /><sub>Brian Hough</sub>](http://rallypoint.gg)<br />[💡](#example-bhough \"Examples\") | [<img src=\"https://avatars3.githubusercontent.com/u/4950425?v=3\" width=\"100px;\"/><br /><sub>Erik Cupal</sub>](https://github.com/ErikCupal)<br />[💻](https://github.com/paypal/glamorous/commits?author=ErikCupal \"Code\") | [<img src=\"https://avatars1.githubusercontent.com/u/9153498?v=3\" width=\"100px;\"/><br /><sub>Kok J Sam</sub>](https://github.com/sammkj)<br />[💻](https://github.com/paypal/glamorous/commits?author=sammkj \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/14885189?v=3\" width=\"100px;\"/><br /><sub>Oleg Proskurin</sub>](http://twitter.com/#!/usulpro)<br />[📖](https://github.com/paypal/glamorous/commits?author=UsulPro \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/848525?v=3\" width=\"100px;\"/><br /><sub>Luke John</sub>](https://github.com/luke-john)<br />[💻](https://github.com/paypal/glamorous/commits?author=luke-john \"Code\") |\n| [<img src=\"https://avatars2.githubusercontent.com/u/4118089?v=3\" width=\"100px;\"/><br /><sub>FredericH</sub>](http://fr.linkedin.com/in/fredericheem)<br />[💡](#example-FredericHeem \"Examples\") | [<img src=\"https://avatars3.githubusercontent.com/u/656630?v=3\" width=\"100px;\"/><br /><sub>Atticus White</sub>](https://atticuswhite.com)<br />[📖](https://github.com/paypal/glamorous/commits?author=ajwhite \"Documentation\") [🔌](#plugin-ajwhite \"Plugin/utility libraries\") | [<img src=\"https://avatars0.githubusercontent.com/u/13483453?v=3\" width=\"100px;\"/><br /><sub>marzelin</sub>](https://github.com/marzelin)<br />[💻](https://github.com/paypal/glamorous/commits?author=marzelin \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/4074973?v=3\" width=\"100px;\"/><br /><sub>iwantmyname</sub>](https://iwantmyname.com/)<br />[🚇](#infra-iwantmyname \"Infrastructure (Hosting, Build-Tools, etc)\") | [<img src=\"https://avatars1.githubusercontent.com/u/11809142?v=3\" width=\"100px;\"/><br /><sub>Ethan Godt</sub>](http://ethangodt.com)<br /> | [<img src=\"https://avatars3.githubusercontent.com/u/2175447?v=3\" width=\"100px;\"/><br /><sub>Zill Ding</sub>](https://github.com/zillding)<br />[💻](https://github.com/paypal/glamorous/commits?author=zillding \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/411643?v=3\" width=\"100px;\"/><br /><sub>Dan Bradley</sub>](https://github.com/debradley)<br />[💻](https://github.com/paypal/glamorous/commits?author=debradley \"Code\") |\n| [<img src=\"https://avatars3.githubusercontent.com/u/22868432?v=3\" width=\"100px;\"/><br /><sub>Lufty Wiranda</sub>](http://instagram.com/luftywiranda13)<br />[💻](https://github.com/paypal/glamorous/commits?author=luftywiranda13 \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/3208863?v=3\" width=\"100px;\"/><br /><sub>Ansuman Shah</sub>](https://github.com/ansumanshah)<br />[💻](https://github.com/paypal/glamorous/commits?author=ansumanshah \"Code\") [📖](https://github.com/paypal/glamorous/commits?author=ansumanshah \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/11598?v=3\" width=\"100px;\"/><br /><sub>Travis LaDuke</sub>](http://-)<br />[💡](#example-laduke \"Examples\") | [<img src=\"https://avatars2.githubusercontent.com/u/11290953?v=3\" width=\"100px;\"/><br /><sub>Aydın Çağrı Dumlu</sub>](https://github.com/acgrdumlu)<br />[🐛](https://github.com/paypal/glamorous/issues?q=author%3Aacgrdumlu \"Bug reports\") [💻](https://github.com/paypal/glamorous/commits?author=acgrdumlu \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1383861?v=3\" width=\"100px;\"/><br /><sub>Maja Wichrowska</sub>](https://github.com/majapw)<br />[🐛](https://github.com/paypal/glamorous/issues?q=author%3Amajapw \"Bug reports\") | [<img src=\"https://avatars3.githubusercontent.com/u/6845263?v=3\" width=\"100px;\"/><br /><sub>Tom Liu</sub>](https://github.com/gt3240)<br />[📖](https://github.com/paypal/glamorous/commits?author=gt3240 \"Documentation\") | [<img src=\"https://avatars3.githubusercontent.com/u/1863771?v=3\" width=\"100px;\"/><br /><sub>Siddharth Kshetrapal</sub>](https://github.com/siddharthkp)<br />[⚠️](https://github.com/paypal/glamorous/commits?author=siddharthkp \"Tests\") [🔧](#tool-siddharthkp \"Tools\") |\n| [<img src=\"https://avatars2.githubusercontent.com/u/5257243?v=3\" width=\"100px;\"/><br /><sub>WillowHQ</sub>](https://github.com/WillowHQ)<br />[📖](https://github.com/paypal/glamorous/commits?author=WillowHQ \"Documentation\") | [<img src=\"https://avatars3.githubusercontent.com/u/12202757?v=4\" width=\"100px;\"/><br /><sub>Mohammad Rajabifard</sub>](https://tarino.ir)<br />[🐛](https://github.com/paypal/glamorous/issues?q=author%3Amorajabi \"Bug reports\") [📖](https://github.com/paypal/glamorous/commits?author=morajabi \"Documentation\") |\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors][all-contributors] specification.\nContributions of any kind welcome!\n\n## LICENSE\n\nMIT\n\n[npm]: https://www.npmjs.com/\n[node]: https://nodejs.org\n[build-badge]: https://img.shields.io/travis/paypal/glamorous.svg?style=flat-square\n[build]: https://travis-ci.org/paypal/glamorous\n[coverage-badge]: https://img.shields.io/codecov/c/github/paypal/glamorous.svg?style=flat-square\n[coverage]: https://codecov.io/github/paypal/glamorous\n[version-badge]: https://img.shields.io/npm/v/glamorous.svg?style=flat-square\n[package]: https://www.npmjs.com/package/glamorous\n[downloads-badge]: https://img.shields.io/npm/dm/glamorous.svg?style=flat-square\n[npm-stat]: http://npm-stat.com/charts.html?package=glamorous&from=2017-04-01\n[license-badge]: https://img.shields.io/npm/l/glamorous.svg?style=flat-square\n[license]: https://github.com/paypal/glamorous/blob/master/LICENSE\n[prs-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[prs]: http://makeapullrequest.com\n[chat]: https://gitter.im/paypal/glamorous\n[chat-badge]: https://img.shields.io/gitter/room/paypal/glamorous.svg?style=flat-square\n[coc-badge]: https://img.shields.io/badge/code%20of-conduct-ff69b4.svg?style=flat-square\n[coc]: https://github.com/paypal/glamorous/blob/master/other/CODE_OF_CONDUCT.md\n[roadmap-badge]: https://img.shields.io/badge/%F0%9F%93%94-roadmap-CD9523.svg?style=flat-square\n[roadmap]: https://github.com/paypal/glamorous/blob/master/other/ROADMAP.md\n[examples-badge]: https://img.shields.io/badge/%F0%9F%92%A1-examples-8C8E93.svg?style=flat-square\n[examples]: https://github.com/paypal/glamorous/blob/master/examples\n[github-watch-badge]: https://img.shields.io/github/watchers/paypal/glamorous.svg?style=social\n[github-watch]: https://github.com/paypal/glamorous/watchers\n[github-star-badge]: https://img.shields.io/github/stars/paypal/glamorous.svg?style=social\n[github-star]: https://github.com/paypal/glamorous/stargazers\n[twitter]: https://twitter.com/intent/tweet?text=Check%20out%20glamorous!%20https://github.com/paypal/glamorous%20%F0%9F%91%8D\n[twitter-badge]: https://img.shields.io/twitter/url/https/github.com/paypal/glamorous.svg?style=social\n[emojis]: https://github.com/kentcdodds/all-contributors#emoji-key\n[all-contributors]: https://github.com/kentcdodds/all-contributors\n[glamor]: https://github.com/threepointone/glamor\n[rtl-css-js]: https://github.com/kentcdodds/rtl-css-js\n[gzip-badge]: http://img.badgesize.io/https://unpkg.com/glamorous/dist/glamorous.umd.min.js?compression=gzip&label=gzip%20size&style=flat-square\n[size-badge]: http://img.badgesize.io/https://unpkg.com/glamorous/dist/glamorous.umd.min.js?label=size&style=flat-square\n[tiny-gzip-badge]: http://img.badgesize.io/https://unpkg.com/glamorous/dist/glamorous.umd.tiny.min.js?compression=gzip&label=gzip%20size&style=flat-square\n[tiny-size-badge]: http://img.badgesize.io/https://unpkg.com/glamorous/dist/glamorous.umd.tiny.min.js?label=size&style=flat-square\n[unpkg-dist]: https://unpkg.com/glamorous/dist/\n[glamor-gzip-badge]: http://img.badgesize.io/https://unpkg.com/glamor/umd/index.min.js?compression=gzip&label=gzip%20size&style=flat-square\n[glamor-size-badge]: http://img.badgesize.io/https://unpkg.com/glamor/umd/index.min.js?label=size&style=flat-square\n[unpkg-glamor]: https://unpkg.com/glamor/umd/\n[module-formats-badge]: https://img.shields.io/badge/module%20formats-umd%2C%20cjs%2C%20es-green.svg?style=flat-square\n[mainFields]: https://webpack.js.org/configuration/resolve/#resolve-mainfields\n[umd]: https://github.com/umdjs/umd\n[styled-components-util]: https://codepen.io/kentcdodds/pen/MpxMge\n[intro-blogpost]: https://medium.com/p/fb3c9f4ed20e\n[react-ssr]: https://facebook.github.io/react/docs/react-dom-server.html\n[glamor-ssr]: https://github.com/threepointone/glamor/blob/5e7d988211330b8e2fca5bb8da78e35051444efd/docs/server.md\n[help-sandbox]: http://kcd.im/glamorous-help\n[react-devtools]: https://github.com/facebook/react-devtools\n[babel-plugin]: https://github.com/paypal/glamorous/issues/29\n[unknown-prop-warning]: https://facebook.github.io/react/warnings/unknown-prop.html\n[babel-plugin-module-resolver]: https://github.com/tleunen/babel-plugin-module-resolver\n[resolve-alias]: https://webpack.js.org/configuration/resolve/#resolve-alias\n[glamorous-native]: https://github.com/robinpowered/glamorous-native\n[typescript-usage]: https://github.com/paypal/glamorous/blob/master/other/TYPESCRIPT_USAGE.md\n[gwc]: https://girlswhocode.com/\n[babel-displayname]: https://www.npmjs.com/package/babel-plugin-glamorous-displayname\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/paypal/glamorous.git"
  },
  "scripts": {
    "doctoc": "doctoc --maxlevel 3 --title \"**Table of Contents**\"",
    "precommit": "lint-staged && opt --in pre-commit --exec \"npm start validate\"",
    "start": "nps",
    "test": "nps test",
    "test:ts": "(tsc -p ./tsconfig.json && rimraf test-ts) || rimraf test-ts"
  },
  "typings": "typings/glamorous.d.ts",
  "version": "3.25.0"
}
